{{#fill_Content "css"}}
  <link rel="stylesheet" href="/css/styleProfile.css" />
{{/fill_Content}}

{{#fill_Content 'js'}}
<script>
    const frmProfile = document.querySelector('#frmProfile');
    const txtEmail = document.querySelector('#txtEmail');
    const txtOldEmail = '{{user.email}}'; 
    const btnSubmit = document.querySelector('#btnSubmit');
    const emailHelp = document.querySelector('#emailHelp');
    const otpContainer = document.querySelector('#otpContainer');
    const txtOTP = document.querySelector('#txtOTP');
    
    // Kh·ªüi t·∫°o Alert Box v√† logic hi·ªÉn th·ªã/·∫©n tin nh·∫Øn
    const cardBody = document.querySelector('.card-body');
    const alertBox = document.createElement('div');
    alertBox.id = 'alertBox';
    alertBox.classList.add('mb-3');
    if (!document.querySelector('#alertBox')) {
        cardBody.prepend(alertBox);
    }

    function showMessage(msg, isError = false) {
        if (!alertBox) return;

        if (!msg) {
            alertBox.innerHTML = '';
            emailHelp.innerHTML = `We'll never share your email with anyone else.`;
            return;
        }

        const type = isError ? 'danger' : 'success';
        alertBox.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${msg}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
        emailHelp.innerHTML = isError ?
            `<span class="text-danger">${msg}</span>` : `<span class="text-success">${msg}</span>`;
    }

    // Logic x·ª≠ l√Ω OTP v√† Update Profile (Gi·ªØ nguy√™n)
    async function handleUpdateProfile(e) {
        e.preventDefault();
        showMessage('', false);

        const newEmail = txtEmail.value.toLowerCase().trim();
        const emailChanged = newEmail !== txtOldEmail.toLowerCase().trim();

        if (!emailChanged) {
            frmProfile.removeEventListener('submit', handleUpdateProfile);
            frmProfile.submit();
            return;
        }
        
        // G·ª≠i y√™u c·∫ßu OTP
        let res = await fetch('/account/profile/send-otp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email: newEmail })
        });
        let otpData = await res.json();
        
        if (otpData.success) {
            if (otpData.skip_otp) {
                frmProfile.removeEventListener('submit', handleUpdateProfile);
                frmProfile.submit();
                return;
            }
            
      let msg = 'An OTP has been sent to your new email. Please check and enter the code.';
      if (otpData.mock_code) {
        msg = `An OTP has been sent to your new email. Please check and enter the code.`;
      }
                showMessage(msg, false);
            
            btnSubmit.innerHTML = '<i class="bi bi-check2-square"></i> Verify Email';
            otpContainer.style.display = 'block';

            frmProfile.removeEventListener('submit', handleUpdateProfile);
            frmProfile.addEventListener('submit', handleVerifyAndSubmit);
    } else {
      showMessage(otpData.message || 'Error sending OTP. Please try again.', true);
    }
    }

    async function handleVerifyAndSubmit(e) {
        e.preventDefault();
        const email = txtEmail.value.toLowerCase().trim();
        const otp = txtOTP.value;

    if (otp.length === 0) {
      showMessage('Please enter the OTP code.', true);
      return;
    }
        
        let res = await fetch('/account/profile/verify-otp', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email: email, otp: otp })
        });
        let data = await res.json();
        
    if (data.success) {
      showMessage('OTP verified successfully! Updating profile...', false);
            
            frmProfile.removeEventListener('submit', handleVerifyAndSubmit);
            frmProfile.removeEventListener('submit', handleUpdateProfile);
            
            const hiddenVerifiedEmail = document.createElement('input');
            hiddenVerifiedEmail.type = 'hidden';
            hiddenVerifiedEmail.name = 'verified_email';
            hiddenVerifiedEmail.value = email;
            frmProfile.appendChild(hiddenVerifiedEmail);
            
            frmProfile.submit(); 
        } else {
            showMessage(data.message, true);
        }
    }
    
    frmProfile.addEventListener('submit', handleUpdateProfile);

    // Logic preview avatar
    const txtAvatarUrlInput = document.querySelector('#txtAvatarUrlInput');
    const avatarPreview = document.querySelector('#avatar-preview');
    const hiddenAvatarUrl = document.querySelector('#hiddenAvatarUrl');
    // üÜï Khai b√°o input file m·ªõi
    const fileAvatarUpload = document.querySelector('#fileAvatarUpload'); 


    // ----------------------------------------------------------------------
    // üÜï LOGIC T·∫¢I ·∫¢NH (Upload) B·∫∞NG AJAX V√Ä PREVIEW
    // ----------------------------------------------------------------------
    if (fileAvatarUpload && txtAvatarUrlInput) {
        fileAvatarUpload.addEventListener('change', async function(e) {
            const file = e.target.files[0];
            if (!file) return;

            // 1. Preview ·∫£nh ngay l·∫≠p t·ª©c
            const reader = new FileReader();
            reader.onload = function(e) {
                avatarPreview.src = e.target.result;
            };
            reader.readAsDataURL(file);

            // 2. Chu·∫©n b·ªã FormData v√† g·ª≠i l√™n server
            const formData = new FormData();
            formData.append('file', file); 
            // V√å router.post('/upload', upload.single('file')) -> t√™n tr∆∞·ªùng l√† 'file'

            try {
                // T·∫Øt c√°c input li√™n quan khi ƒëang upload
                txtAvatarUrlInput.disabled = true;
                fileAvatarUpload.disabled = true;
                btnSubmit.disabled = true;
                showMessage('Uploading image...', false);

                // 3. G·ª≠i AJAX l√™n route t·∫£i ·∫£nh
                const res = await fetch('/account/upload', {
                    method: 'POST',
                    body: formData,
                });

                const data = await res.json();
                
                if (data.url) {
                    // 4. N·∫øu th√†nh c√¥ng, g√°n URL tr·∫£ v·ªÅ v√†o tr∆∞·ªùng ·∫©n
                    hiddenAvatarUrl.value = data.url;
                    // X√≥a URL c≈© n·∫øu c√≥
                    txtAvatarUrlInput.value = ''; 
                    showMessage('Avatar uploaded successfully! Please click Update Profile to save.', false);
                } else {
                    // N·∫øu server tr·∫£ v·ªÅ l·ªói
                    showMessage(data.message || 'Error uploading image to server.', true);
                    hiddenAvatarUrl.value = '{{user.avatar_url}}'; // Kh√¥i ph·ª•c URL c≈©
                }

            } catch (err) {
                console.error('Upload failed:', err);
                showMessage('Connection error or upload failed.', true);
                hiddenAvatarUrl.value = '{{user.avatar_url}}';
            } finally {
                // B·∫≠t l·∫°i c√°c input
                txtAvatarUrlInput.disabled = false;
                fileAvatarUpload.disabled = false;
                btnSubmit.disabled = false;
                // X√≥a file ƒë√£ ch·ªçn ƒë·ªÉ l·∫ßn sau ng∆∞·ªùi d√πng c√≥ th·ªÉ ch·ªçn l·∫°i c√πng file
                fileAvatarUpload.value = ''; 
            }
        });
    }

    // ----------------------------------------------------------------------
    // LOGIC PREVIEW T·ª™ URL (Ch·ªânh s·ª≠a ƒë·ªÉ x√≥a file upload khi d√°n URL)
    // ----------------------------------------------------------------------
    if (txtAvatarUrlInput && avatarPreview && hiddenAvatarUrl) {
        txtAvatarUrlInput.addEventListener('input', function() {
            const url = this.value.trim();
            avatarPreview.src = url || '/img/placeholder-avatar.jpg';
            hiddenAvatarUrl.value = url;
            // üÜï Khi nh·∫≠p URL, x√≥a gi√° tr·ªã file upload
            if (fileAvatarUpload) fileAvatarUpload.value = ''; 
        });

        avatarPreview.onerror = function() {
            this.src = '/img/placeholder-avatar.jpg';
        };
    }
</script>
{{/fill_Content}}

<div class="profile-scope">
  <form action="/account/profile" method="post" id="frmProfile" enctype="multipart/form-data">
    <div class="card">
      <h5 class="card-header d-flex justify-content-center">Your profile</h5>
      <div class="card-body">
        
        {{#if error}}
            <div class="alert alert-danger mb-3" role="alert">
                {{error}}
            </div>
        {{/if}}
        {{#if message}}
            <div class="alert alert-success mb-3" role="alert">
                {{message}}
            </div>
        {{/if}}

        <div> 
            
            <div class="mb-3">
              <input
                type="text"
                class="form-control"
                id="txtID"
                name="id"
                value="{{user.id}}"
                hidden
              />
            </div>
            
            {{#ifCond user.role "===" "instructor"}}
              <div class="mb-3 d-flex flex-column align-items-center">
                <label class="form-label mb-2">Avatar Preview</label> 

                <img
                  src="{{user.avatar_url}}"
                  alt="Avatar"
                  class="img-thumbnail"
                  style="max-width: 150px; max-height: 150px; object-fit: cover;"
                  onerror="this.onerror=null; this.src='/img/placeholder-avatar.jpg';"
                  id="avatar-preview"
                />
              </div>

              <div class="mb-3">
            <label for="fileAvatarUpload" class="form-label">Upload from computer</label>
                <input
                    type="file"
                    class="form-control"
                    id="fileAvatarUpload"
                    name="avatar_file"
                    accept="image/jpeg,image/png,image/gif,image/webp"
                />
              </div>
            {{/ifCond}}

            <div class="mb-3">
              <label for="txtName" class="form-label">Name</label>
              <input
                type="text"
                class="form-control"
                id="txtName"
                name="name"
                value="{{user.name}}"
              />
            </div>
            
            <div class="mb-3">
              <label for="txtEmail" class="form-label">Email address</label>
              <input
                type="email"
                class="form-control"
                id="txtEmail"
                aria-describedby="emailHelp"
                name="email"
                value="{{user.email}}"
              />
              <div id="emailHelp" class="form-text">We'll never share your email
                with anyone else.
              </div>
            </div>
            
            <div class="mb-3">
              <label for="txtRole" class="form-label">Role</label>
              <input
                type="text"
                class="form-control"
                id="txtRole"
                name="role"
                value="{{user.role}} "
                disabled
              />
            </div>

            {{#ifCond user.role "===" "instructor"}}
              <div class="mb-3">
                <label for="txtAvatarUrlInput" class="form-label">Avatar URL</label>
                <input
                  type="text"
                  class="form-control"
                  id="txtAvatarUrlInput"
                  value="{{user.avatar_url}}"
                  placeholder="Paste image URL here..."
                />
              </div>

              <input
                type="hidden"
                name="avatar_url"
                id="hiddenAvatarUrl"
                value="{{user.avatar_url}}"
              />
              
              <div class="mb-3">
                <label for="txtBio" class="form-label">Bio</label>
                <textarea
                  class="form-control"
                  id="txtBio"
                  name="bio"
                  rows="3"
                >{{user.bio}}</textarea>
              </div>
            {{/ifCond}}

            <div class="mb-3" id="otpContainer" style="display: none;">
                <label for="txtOTP" class="form-label">OTP Code (Email verification)</label>
                <input type="text" class="form-control" id="txtOTP" name="otp" maxlength="6">
            </div>
          </div>
      </div>
      <div class="card-footer text-muted">
        <button
          type="submit"
          formaction="/account/profile"
          class="btn btn-primary"
          id="btnSubmit"
        >Update Profile</button>

      </div>
    </div>
  </form>
</div>